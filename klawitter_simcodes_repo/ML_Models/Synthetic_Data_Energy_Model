import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Input
import matplotlib.pyplot as plt
import numpy as np
import os
from tensorflow.keras.callbacks import EarlyStopping


os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'  # suppress TF CPU info logs

# Load and inspect data
df = pd.read_csv(r"C:\Users\Klaws\Downloads\synthetic_efp_dataset.csv")

# Separate input features and targets
X = df[[
    "distance", "charge1", "charge2", "dipole1", "dipole2",
    "quadrupole1", "quadrupole2", "octupole1", "octupole2"
]]

y = df[[
    "E_electrostatic", "E_repulsion", "E_polarization", 
    "E_dispersion", "E_charge_transfer", "E_total"
]]

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize inputs
scaler_x = StandardScaler()
X_train_scaled = scaler_x.fit_transform(X_train)
X_test_scaled = scaler_x.transform(X_test)

# Standardize targets
scaler_y = StandardScaler()
y_train_scaled = scaler_y.fit_transform(y_train)
y_test_scaled = scaler_y.transform(y_test)

# Build a simpler model first to verify learning
model = Sequential([
    Input(shape=(X_train_scaled.shape[1],)),
    Dense(128, activation='relu'),   # More neurons for richer representations
    Dense(128, activation='relu'),   # Additional hidden layer
    Dense(64, activation='relu'),    # Another hidden layer with fewer neurons
    Dense(6)                         # Output layer remains the same
])


# Create EarlyStopping callback
early_stop = EarlyStopping(
    monitor='val_loss',    # monitor validation loss
    patience=50,           # stop if no improvement after 50 epochs
    restore_best_weights=True  # restore model weights from best epoch
)

model.compile(optimizer='adam', loss='mse', metrics=['mae'])


# Train the model with EarlyStopping callback
history = model.fit(
    X_train_scaled, y_train_scaled,
    epochs=200,
    validation_split=0.2,
    verbose=1,
    callbacks=[early_stop]
)

# Evaluate model on scaled targets
loss, mae = model.evaluate(X_test_scaled, y_test_scaled)
print(f"Test Loss (MSE): {loss:.4f}, Test MAE: {mae:.4f}")

# Predict and inverse transform predictions to original scale
y_pred_scaled = model.predict(X_test_scaled)
y_pred = scaler_y.inverse_transform(y_pred_scaled)

# Plot predicted vs. true for total energy
plt.scatter(y_test["E_total"], y_pred[:, -1], alpha=0.5)
plt.xlabel("True Total Energy")
plt.ylabel("Predicted Total Energy")
plt.title("Total Energy Prediction")
plt.grid(True)
plt.show()

# Plot all components with correlation coefficient
component_names = y.columns
for i, name in enumerate(component_names):
    plt.figure(figsize=(5, 5))
    plt.scatter(y_test[name], y_pred[:, i], alpha=0.5)
    plt.plot([y_test[name].min(), y_test[name].max()],
             [y_test[name].min(), y_test[name].max()],
             'r--', label='Ideal')
    plt.xlabel(f"True {name}")
    plt.ylabel(f"Predicted {name}")
    plt.title(f"{name} Prediction")

    corr = np.corrcoef(y_test[name], y_pred[:, i])[0, 1]
    plt.legend(title=f'Corr: {corr:.3f}')
    plt.grid(True)
    plt.show()
